{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "scopeName": "source.neoluma",
  "name": "Neoluma",
  "patterns": [
    { "include": "#comments" },
    { "include": "#docstrings" },
    { "include": "#preprocessors" },
    { "include": "#strings" },
    { "include": "#keywords" },
    { "include": "#types" },
    { "include": "#booleans" },
    { "include": "#modifiers" },
    { "include": "#declarations" },
    { "include": "#inheritance" },
    { "include": "#operators" },
    { "include": "#pointer_ops" },
    { "include": "#delimiters" },
    { "include": "#variables_with_type" },
    { "include": "#variables" },
    { "include": "#numbers" },
    { "include": "#function_names" },
    { "include": "#function_calls" },
    { "include": "#decorators" },
    { "include": "#generic_types" },
    { "include": "#support_libraries" },
    { "include": "#imports" },
    { "include": "#namespace_scope" },
    { "include": "#enum_elements" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.neoluma",
          "match": "//.*$"
        },
        {
          "name": "comment.block.neoluma",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "docstrings": {
      "patterns": [
        {
          "name": "string.quoted.triple.neoluma",
          "begin": "'''",
          "end": "'''",
          "patterns": [
            {
              "name": "constant.character.escape.neoluma",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "preprocessors": {
      "patterns": [
        {
          "name": "keyword.control.preprocessor.neoluma",
          "match": "#\\b(import|define|if|else|endif|unsafe|baremetal|macro|comptime|float|use)\\b"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.neoluma",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.neoluma",
          "match": "\\\\."
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.neoluma",
          "match": "\\b(if|else|for|while|break|continue|switch|case|default|try|catch|throw|async|await|yield|return|as|with|in|lambda|debug)\\b"
        }
      ]
    },
    "modifiers": {
      "patterns": [
        {
          "name": "storage.modifier.neoluma",
          "match": "\\b(public|private|protected|static|const|decorator|override|unsafe)\\b"
        }
      ]
    },
    "declarations": {
      "patterns": [
        {
          "name": "keyword.declaration.neoluma",
          "match": "\\b(class|enum|interface|namespace|function|fn)\\b"
        }
      ]
    },
    "inheritance": {
      "patterns": [
        {
          "name": "keyword.operator.inheritance.neoluma",
          "match": "<-"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "storage.type.neoluma",
          "match": "\\b(int|float|number|bool|string|array|set|dict|void|result)\\b"
        }
      ]
    },
    "booleans": {
      "patterns": [
        {
          "name": "constant.language.boolean.neoluma",
          "match": "\\b(true|false|null)\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.neoluma",
          "match": "(&|\\+=|\\-=|\\*=|/=|%=|\\^=|==|!=|<=|>=|&&|\\|\\||\\+|\\-|\\*|/|%|\\^|=|<-|<|>)"
        }
      ]
    },
    "pointer_ops": {
      "patterns": [
        {
          "name": "keyword.operator.pointer.neoluma",
          "match": "(&|\\*)"
        }
      ]
    },
    "delimiters": {
      "patterns": [
        {
          "name": "punctuation.delimiter.neoluma",
          "match": "[\\(\\)\\{\\}\\[\\];,\\.:]"
        }
      ]
    },
    "variables_with_type": {
      "patterns": [
        {
          "name": "variable.other.typed.neoluma",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?=\\s*:\\s*(int|float|number|bool|string|array|set|dict|void|result))"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.assignment.neoluma",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?=\\s*=)"
        },
        {
          "name": "variable.other.importalias.neoluma",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?=\\s*\\.)"
        },
        {
          "name": "variable.other.importalias.neoluma",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?=\\s*\\))" 
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.neoluma",
          "match": "\\b\\d+(\\.\\d+)?\\b"
        }
      ]
    },
    "function_names": {
      "patterns": [
        {
          "match": "\\b(?:fn|function)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
          "captures": {
            "1": {
              "name": "entity.name.function.neoluma"
            }
          }
        }
      ]
    },
    "function_calls": {
      "patterns": [
        {
          "name": "support.function.call.neoluma",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()"
        }
      ]
    },
    "decorators": {
      "patterns": [
        {
			"name": "meta.annotation.neoluma",
			"match": "@[a-zA-Z_][a-zA-Z0-9_]*"
		}
      ]
    },

    "generic_types": {
      "patterns": [
        {
          "begin": "<",
          "beginCaptures": {
            "0": { "name": "punctuation.definition.generic.begin.neoluma" }
          },
          "end": ">",
          "endCaptures": {
            "0": { "name": "punctuation.definition.generic.end.neoluma" }
          },
          "patterns": [
            {
              "name": "storage.type.neoluma",
              "match": "\\b(int|float|number|bool|string|array|set|dict|void|result)\\b"
            }
          ]
        }
      ]
    },

   	"support_libraries": {
      "patterns": [
        {
          "name": "support.library.neoluma",
          "match": "\\b(map|memory|size)\\b"
        }
      ]
    },

    "imports": {
      "patterns": [
        {
          "name": "meta.import.neoluma",
          "begin": "#(import)\\b",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.import.neoluma"
            }
          },
          "end": "$",
          "patterns": [
            {
              "name": "string.unquoted.importpath.neoluma",
              "match": "\"[^\"]+\""
            },
            {
              "name": "keyword.control.import.as.neoluma",
              "match": "\\bas\\b"
            },
            {
              "name": "variable.other.importalias.neoluma",
              "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
            },
            {
              "name": "support.language.external.neoluma",
              "match": "\\b[a-z]+:[a-zA-Z0-9_./\\\\]+\\b"
            }
          ]
        }
      ]
    },
    "namespace_scope": {
      "patterns": [
        {
          "name": "entity.name.namespace.neoluma",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)"
        },
        {
          "name": "punctuation.separator.namespace.neoluma",
          "match": "\\."
        }
      ]
    },
    "enum_elements": {
      "patterns": [
        {
          "name": "constant.other.enum.neoluma",
          "match": "\\b([A-Z][a-zA-Z0-9_]*)\\b"
        }
      ]
    }
  }
}
