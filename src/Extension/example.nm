#unsafe // Marks the code as unsafe for low-level operations

// Line comment
/*
    Block comment
    spanning multiple lines
*/

// Variables
a = 20
b: string = "Hello!" // Type is optional
const c = 42;

myarray = [1, 2, 3]
mydict = {"x": 1, "y": 2}
myset = (true, "apple", 1.5)
mybool = false
nullable: int = null

// Enums and Interfaces
enum Color { Red, Green, Blue }
interface IShape { name: string, area: float }

// Class and method declaration
class Animal {
    init() {}

    public fn speak() {
        print("Sound")
    }
}

class Dog <- Animal {
    @override
    public static fn speak() {
        print("Bark")
    }
}

// Lambda and concise syntax
lambda x, y: x + y
(x, y) => x * y

'''
Entry point of program
'''
public function main(args: string[], number) {
    print("Hello, ${args[0]}!")

    result = add(10, 5)
    print("Sum: ${result}")
}

private fn add(a, b) -> int {
    return a + b
}

public fn subtract(a, b) -> int => a - b

// Unsafe memory access
#import "memory"

ptr = &map<int>(memory.allocate(4 * size(int)))
*ptr = 123
print(*ptr)
memory.free(ptr)

// Imports from Neoluma modules
#import "math"
#import "random" as rnd

num = rnd.random(1, 100)
print(num)

a = input("Say something: ")
with open("log.txt", "w") as file {
    file.write(a)
}

// Control flow
for (i in range(5)) {
    print(i)
}

while (true) {
    break
}

if (num > 50) {
    print("Big number")
} else {
    print("Small number")
}

switch (num) {
    case 1:
        print("One")
    case 2:
        print("Two")
    default:
        print("Other")
}

// Namespace
namespace app.tools

// Generators (list comprehension)
squares = [x * x for x in range(10)]

// Importing external language pack
#import "cpp:mathlib" as math

public fn calc() -> int {
    return math.sqrt(144)
}

// Try/catch/throw
try {
    risky()
} catch (err) {
    print("Error: ${err}")
    throw err
}

fn risky() -> result {
    return result.error("Oops!")
}

// Decorator usage
@decorator
fn decorated_func() {
    print("I'm decorated!")
}